!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
CC	makefile	/^CC=gcc$/;"	m
CFLAGS	makefile	/^CFLAGS=-g$/;"	m
INIT_LIBC_ROUTINE	main.c	46;"	d	file:
LDFLAGS	makefile	/^LDFLAGS=-ldl -pthread -fPIC -shared$/;"	m
LIB	makefile	/^LIB=libxxx.so$/;"	m
POT_ITEM_NUMBER	global.h	8;"	d
SO_PATH	script.c	12;"	d	file:
SPIN_LOCK_UNLOCKED	global.h	27;"	d
TEST	makefile	/^TEST=test$/;"	m
TESTFLAGS	makefile	/^TESTFLAGS=-pthread$/;"	m
WRAPPER	makefile	/^WRAPPER=btrecorder$/;"	m
_GLOBAL_H_	global.h	3;"	d
_GNU_SOURCE	main.c	1;"	d	file:
_PROTOCAL_H_	protocal.h	3;"	d
__libc_start_main	main.c	/^int __libc_start_main(int (* main) (int, char **, char **),$/;"	f
_exit	libc.c	/^void _exit (int status)$/;"	f
_libc_exit	main.c	/^void (* _libc_exit)(int) = NULL;$/;"	v
_libc_gettimeofday	main.c	/^int (* _libc_gettimeofday)(struct timeval *, struct timezone *) = NULL;$/;"	v
_libc_sigaction	main.c	/^int (* _libc_sigaction)(int, const struct sigaction *, struct sigaction *) = NULL;$/;"	v
acquire_ownership	protocal.c	/^void acquire_ownership (unsigned long page_start_addr, pid_t pid, int type)$/;"	f
child1	test.c	/^void *child1(void *arg)$/;"	f
child2	test.c	/^void *child2(void *arg)$/;"	f
dend	main.c	/^unsigned int dstart, dend, dlenth;$/;"	v
dlenth	main.c	/^unsigned int dstart, dend, dlenth;$/;"	v
dstart	main.c	/^unsigned int dstart, dend, dlenth;$/;"	v
enable	global.h	/^	int enable;$/;"	m	struct:wait_item
flag	global.h	/^	volatile int flag;$/;"	m	struct:wait_item
give_up_ownership	protocal.c	/^void give_up_ownership (pid_t pid)$/;"	f
main	script.c	/^int main(int argc, char **argv)$/;"	f
main	test.c	/^int main (int argc, char **argv)$/;"	f
mode	main.c	/^int mode;\/\/0: record; 1: replay$/;"	v
owner	global.h	/^	pid_t owner;$/;"	m	struct:pot_item
page_fault_handler	main.c	/^static void page_fault_handler(int signum, siginfo_t *info, void *puc)$/;"	f	file:
page_start	global.h	/^	unsigned int page_start;$/;"	m	struct:pot_item
pot_index	main.c	/^unsigned int *pot_index;$/;"	v
pot_item	global.h	/^struct pot_item$/;"	s
pot_item_init	main.c	/^void pot_item_init()$/;"	f
pot_lock	main.c	/^spinlock_t *pot_lock;$/;"	v
pot_table	main.c	/^struct pot_item *pot_table;$/;"	v	typeref:struct:pot_item
print_help	script.c	/^void print_help()$/;"	f
protect_memory	main.c	/^void protect_memory ()$/;"	f
protect_memory_init	main.c	/^void protect_memory_init()$/;"	f
protected	pthread.c	/^int protected = 0;$/;"	v
pthread_create	pthread.c	/^int pthread_create(pthread_t *thread, const pthread_attr_t *attr, void *(*start_routine) (void *), void *arg)$/;"	f
pthread_join	pthread.c	/^int pthread_join(pthread_t thread, void **retval)$/;"	f
read_mode_file	main.c	/^static void read_mode_file()$/;"	f	file:
real__libc_start_main	main.c	/^static int (* real__libc_start_main)(int (*) (int, char **, char **), int, char **, void (*)(void), void (*) (void), void (*) (void), void *) = NULL;$/;"	v	file:
share_file_init	main.c	/^static void share_file_init()$/;"	f	file:
signal_init	main.c	/^static void signal_init()$/;"	f	file:
spin_lock	atomic.c	/^inline void spin_lock(spinlock_t *lock)$/;"	f
spin_trylock	atomic.c	/^inline int spin_trylock(spinlock_t *lock)$/;"	f
spin_unlock	atomic.c	/^inline void spin_unlock(spinlock_t *lock)$/;"	f
spinlock_t	global.h	/^typedef int spinlock_t;$/;"	t
start_cmd	script.c	/^void start_cmd(int argc, char **argv)$/;"	f
status	global.h	/^	int status; \/*0: public, 1: owned*\/$/;"	m	struct:pot_item
testandset	atomic.c	/^static inline int testandset (int *p)$/;"	f	file:
wait_item	global.h	/^struct wait_item$/;"	s
waiter	global.h	/^	struct wait_item waiter[10];$/;"	m	struct:pot_item	typeref:struct:pot_item::wait_item
waiter_number	global.h	/^	int waiter_number;$/;"	m	struct:pot_item
write_mode_file	script.c	/^void write_mode_file (int mode)$/;"	f
x	test.c	/^int x = 0;$/;"	v
